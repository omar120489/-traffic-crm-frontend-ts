# Manual Rollback Workflow
# Allows rolling back to a previous release version

name: Rollback Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to rollback to (e.g., v2.0.0)'
        required: true
        type: string
      reason:
        description: 'Reason for rollback'
        required: true
        type: string
      skip_tests:
        description: 'Skip tests (use only in emergency)'
        required: false
        type: boolean
        default: false

# Prevent concurrent rollbacks
concurrency:
  group: rollback-${{ github.workflow }}
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  validate-rollback:
    name: Validate Rollback Request
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    permissions:
      contents: read
    
    outputs:
      valid: ${{ steps.validate.outputs.valid }}
      version: ${{ steps.validate.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Validate version exists
        id: validate
        run: |
          VERSION="${{ inputs.version }}"
          
          # Check if tag exists
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "‚úÖ Version $VERSION exists"
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Version $VERSION does not exist"
            echo "Available versions:"
            git tag -l "v*.*.*" | tail -10
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Create rollback issue
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üîÑ Rollback to ${{ inputs.version }} initiated`,
              body: `## Rollback Request
              
              **Target Version**: ${{ inputs.version }}
              **Reason**: ${{ inputs.reason }}
              **Initiated by**: @${{ github.actor }}
              **Workflow Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
              **Skip Tests**: ${{ inputs.skip_tests }}
              
              ### Status
              - [x] Validation passed
              - [ ] Build completed
              - [ ] Deployment completed
              - [ ] Verification completed
              
              This issue will be updated as the rollback progresses.`,
              labels: ['rollback', 'high-priority', 'incident']
            });
            
            core.setOutput('issue_number', issue.data.number);

  build-previous-version:
    name: Build Previous Version
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: validate-rollback
    if: needs.validate-rollback.outputs.valid == 'true'
    
    permissions:
      contents: read
    
    steps:
      - name: Checkout previous version
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ inputs.version }}

      - name: Setup Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@a3252b78c470c02df07e9d59298aecedc3ccdd6d # v3.0.0
        with:
          version: 10

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        if: inputs.skip_tests == false
        run: |
          echo "Running tests for version ${{ inputs.version }}"
          pnpm --filter ./apps/frontend run test

      - name: Build frontend
        run: pnpm --filter ./apps/frontend run build

      - name: Build backend
        run: pnpm --filter ./apps/core-api run build

      - name: Validate builds
        run: |
          if [ ! -f "apps/frontend/dist/index.html" ]; then
            echo "‚ùå Frontend build missing"
            exit 1
          fi
          
          if [ ! -d "apps/core-api/dist" ]; then
            echo "‚ùå Backend build missing"
            exit 1
          fi
          
          echo "‚úÖ Builds validated"

      - name: Upload frontend artifacts
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: rollback-frontend
          path: apps/frontend/dist
          retention-days: 7

      - name: Upload backend artifacts
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: rollback-backend
          path: apps/core-api/dist
          retention-days: 7

  deploy-rollback:
    name: Deploy Rollback
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [validate-rollback, build-previous-version]
    
    permissions:
      contents: read
    
    environment:
      name: production
      url: https://example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ inputs.version }}

      - name: Download frontend artifacts
        uses: actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427 # v4.1.4
        with:
          name: rollback-frontend
          path: apps/frontend/dist

      - name: Download backend artifacts
        uses: actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427 # v4.1.4
        with:
          name: rollback-backend
          path: apps/core-api/dist

      - name: Deploy to production
        run: |
          echo "üîÑ Rolling back to ${{ inputs.version }}"
          
          # Add your deployment commands here
          # Same commands as your normal deployment
          
          echo "‚úÖ Rollback deployed"

      - name: Verify deployment
        run: |
          echo "üß™ Verifying rollback..."
          
          sleep 15
          
          # Health check
          # curl -f https://example.com/health || exit 1
          
          # Version check (if you expose version endpoint)
          # DEPLOYED_VERSION=$(curl -s https://example.com/api/version | jq -r '.version')
          # if [ "$DEPLOYED_VERSION" != "${{ inputs.version }}" ]; then
          #   echo "‚ùå Version mismatch"
          #   exit 1
          # fi
          
          echo "‚úÖ Rollback verified"

  notify-rollback:
    name: Notify Rollback Complete
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [validate-rollback, build-previous-version, deploy-rollback]
    if: always()
    
    permissions:
      contents: read
      issues: write
    
    steps:
      - name: Check rollback status
        id: check
        run: |
          if [ "${{ needs.deploy-rollback.result }}" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=‚úÖ" >> $GITHUB_OUTPUT
            echo "message=Rollback to ${{ inputs.version }} completed successfully" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "emoji=‚ùå" >> $GITHUB_OUTPUT
            echo "message=Rollback to ${{ inputs.version }} failed" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        if: always()
        continue-on-error: true
        uses: slackapi/slack-github-action@70cd7be8e40a46e8b0eced40b0de447bdb42f68e # v1.26.0
        with:
          payload: |
            {
              "text": "${{ steps.check.outputs.emoji }} Rollback to ${{ inputs.version }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ steps.check.outputs.emoji }} Rollback to ${{ inputs.version }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.check.outputs.message }}\n\n*Reason:* ${{ inputs.reason }}\n*Initiated by:* @${{ github.actor }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Status:*\n${{ steps.check.outputs.status }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Environment:*\nProduction"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Update rollback issue
        if: always()
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const status = '${{ steps.check.outputs.status }}';
            const emoji = status === 'success' ? '‚úÖ' : '‚ùå';
            
            // Find the rollback issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'rollback',
              state: 'open',
              sort: 'created',
              direction: 'desc',
              per_page: 1
            });
            
            if (issues.data.length > 0) {
              const issue = issues.data[0];
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `## ${emoji} Rollback ${status === 'success' ? 'Complete' : 'Failed'}
                
                **Final Status**: ${status}
                **Version**: ${{ inputs.version }}
                **Workflow**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
                
                ${status === 'success' ? '### ‚úÖ Rollback completed successfully\n\nThe application has been rolled back to version ${{ inputs.version }}.' : '### ‚ùå Rollback failed\n\nPlease review the workflow logs and take manual action if needed.'}
                `
              });
              
              if (status === 'success') {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed',
                  state_reason: 'completed'
                });
              }
            }

