# Optimized Release Workflow
# Based on review recommendations from WORKFLOW_REVIEW.md

name: Release

on:
  push:
    tags:
      - 'v*.*.*'

# Prevent concurrent releases
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

# Default permissions (read-only)
permissions:
  contents: read

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    # Override permissions for this job only
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Check if release notes exist
        id: check_notes
        run: |
          if [ -f "GITHUB_RELEASE_v${{ steps.version.outputs.version }}.md" ]; then
            echo "notes_exist=true" >> $GITHUB_OUTPUT
            echo "notes_file=GITHUB_RELEASE_v${{ steps.version.outputs.version }}.md" >> $GITHUB_OUTPUT
          else
            echo "notes_exist=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate release notes
        id: generate_notes
        if: steps.check_notes.outputs.notes_exist == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.generateReleaseNotes({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ steps.version.outputs.tag }}'
            });
            return data.body;
          result-encoding: string

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.tag }}
          body_path: ${{ steps.check_notes.outputs.notes_exist == 'true' && steps.check_notes.outputs.notes_file || '' }}
          body: ${{ steps.check_notes.outputs.notes_exist == 'false' && steps.generate_notes.outputs.result || '' }}
          draft: false
          prerelease: false
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: TypeScript check (Sprint 2)
        run: pnpm --filter ./apps/frontend run typecheck:sprint2

      - name: Lint
        run: pnpm --filter ./apps/frontend run lint

      - name: Build frontend
        run: pnpm --filter ./apps/frontend run build

      - name: Build backend
        run: pnpm --filter ./apps/core-api run build

      - name: Run unit tests
        run: pnpm --filter ./apps/frontend run test

      - name: Validate builds
        run: |
          echo "🔍 Validating builds..."
          
          # Check frontend build
          if [ -f "apps/frontend/dist/index.html" ]; then
            echo "✅ Frontend build verified"
            echo "Frontend bundle size: $(du -sh apps/frontend/dist | cut -f1)"
          else
            echo "❌ Frontend build missing"
            exit 1
          fi
          
          # Check backend build
          if [ -d "apps/core-api/dist" ]; then
            echo "✅ Backend build verified"
            echo "Backend bundle size: $(du -sh apps/core-api/dist | cut -f1)"
          else
            echo "❌ Backend build missing"
            exit 1
          fi

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: apps/frontend/dist
          retention-days: 30

      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: apps/core-api/dist
          retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
    environment:
      name: staging
      url: https://staging.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: apps/frontend/dist

      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: apps/core-api/dist

      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging..."
          # Add your deployment commands here
          # Examples:
          # - Vercel: vercel deploy --prod
          # - Netlify: netlify deploy --prod
          # - AWS: aws s3 sync ./dist s3://bucket-name
          # - Docker: docker build && docker push && kubectl apply
          echo "✅ Deployment complete"

      - name: Run smoke tests
        run: |
          echo "🧪 Running smoke tests on staging..."
          
          # Wait for deployment to stabilize
          sleep 10
          
          # Health check (uncomment and update URL)
          # curl -f https://staging.example.com/health || exit 1
          
          # API check (uncomment and update URL)
          # curl -f https://staging.example.com/api/health || exit 1
          
          # Frontend check (uncomment and update URL)
          # curl -f https://staging.example.com/ | grep -q "Traffic CRM" || exit 1
          
          echo "✅ Smoke tests passed"

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [create-release, build-and-test, deploy-staging]
    permissions:
      contents: read
      issues: write  # For creating failure issues
    if: always()
    
    steps:
      - name: Check job status
        id: check
        run: |
          if [ "${{ needs.create-release.result }}" == "success" ] && \
             [ "${{ needs.build-and-test.result }}" == "success" ] && \
             [ "${{ needs.deploy-staging.result }}" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=✅" >> $GITHUB_OUTPUT
            echo "message=Release deployed successfully to staging!" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "emoji=❌" >> $GITHUB_OUTPUT
            echo "message=Release deployment failed. Check logs for details." >> $GITHUB_OUTPUT
          fi

      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Send Slack notification
        if: always() && env.SLACK_WEBHOOK_URL != ''
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "${{ steps.check.outputs.emoji }} Release v${{ steps.version.outputs.version }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ steps.check.outputs.emoji }} Release v${{ steps.version.outputs.version }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.check.outputs.message }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Status:*\n${{ steps.check.outputs.status }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Environment:*\nStaging"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Release"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Create failure issue
        if: steps.check.outputs.status == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release v${{ steps.version.outputs.version }} failed`,
              body: `## Release Failure Report
              
              **Version**: v${{ steps.version.outputs.version }}
              **Workflow Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
              **Tag**: ${{ github.ref_name }}
              
              ### Job Results
              - Create Release: ${{ needs.create-release.result }}
              - Build and Test: ${{ needs.build-and-test.result }}
              - Deploy to Staging: ${{ needs.deploy-staging.result }}
              
              ### Next Steps
              1. Review the workflow logs
              2. Fix the issue
              3. Re-tag or create a new release
              
              cc: @omar120489`,
              labels: ['release', 'bug', 'high-priority']
            });

