# Production-Hardened Release Workflow
# Implements all security and maintainability best practices
# Based on GitHub Actions security hardening guidelines

name: Release

on:
  push:
    tags:
      - 'v*.*.*'

# Prevent concurrent releases
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

# Default: read-only permissions (principle of least privilege)
permissions:
  contents: read

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    # Override: this job needs write access to create releases
    permissions:
      contents: write
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@a3252b78c470c02df07e9d59298aecedc3ccdd6d # v3.0.0
        with:
          version: 10

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Check if release notes exist
        id: check_notes
        run: |
          if [ -f "GITHUB_RELEASE_v${{ steps.version.outputs.version }}.md" ]; then
            echo "notes_exist=true" >> $GITHUB_OUTPUT
            echo "notes_file=GITHUB_RELEASE_v${{ steps.version.outputs.version }}.md" >> $GITHUB_OUTPUT
          else
            echo "notes_exist=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate release notes
        id: generate_notes
        if: steps.check_notes.outputs.notes_exist == 'false'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const { data } = await github.rest.repos.generateReleaseNotes({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ steps.version.outputs.tag }}'
            });
            return data.body;
          result-encoding: string

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@9d7c94cfd0a1f3ed45544c887983e9fa900f0564 # v2.0.4
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.tag }}
          body_path: ${{ steps.check_notes.outputs.notes_exist == 'true' && steps.check_notes.outputs.notes_file || '' }}
          body: ${{ steps.check_notes.outputs.notes_exist == 'false' && steps.generate_notes.outputs.result || '' }}
          draft: false
          prerelease: false
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: create-release
    
    # Read-only permissions (no write needed)
    permissions:
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Setup Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@a3252b78c470c02df07e9d59298aecedc3ccdd6d # v3.0.0
        with:
          version: 10

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: TypeScript check (Sprint 2)
        run: pnpm --filter ./apps/frontend run typecheck:sprint2

      - name: Lint
        run: pnpm --filter ./apps/frontend run lint

      - name: Build frontend
        run: pnpm --filter ./apps/frontend run build

      - name: Build backend
        run: pnpm --filter ./apps/core-api run build

      - name: Run unit tests
        run: pnpm --filter ./apps/frontend run test

      - name: Validate builds
        run: |
          echo "🔍 Validating builds..."
          
          # Check frontend build
          if [ -f "apps/frontend/dist/index.html" ]; then
            echo "✅ Frontend build verified"
            echo "Frontend bundle size: $(du -sh apps/frontend/dist | cut -f1)"
          else
            echo "❌ Frontend build missing"
            exit 1
          fi
          
          # Check backend build
          if [ -d "apps/core-api/dist" ]; then
            echo "✅ Backend build verified"
            echo "Backend bundle size: $(du -sh apps/core-api/dist | cut -f1)"
          else
            echo "❌ Backend build missing"
            exit 1
          fi
          
          # Security: Check for sensitive files
          if find apps/frontend/dist -name "*.env*" -o -name "*.key" -o -name "*.pem" | grep -q .; then
            echo "❌ Sensitive files found in build"
            exit 1
          fi
          
          echo "✅ Security check passed"

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: frontend-build
          path: apps/frontend/dist
          retention-days: 30
          if-no-files-found: error

      - name: Upload backend build artifacts
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: backend-build
          path: apps/core-api/dist
          retention-days: 30
          if-no-files-found: error

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build-and-test
    
    # Read-only permissions
    permissions:
      contents: read
    
    environment:
      name: staging
      url: https://staging.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Download frontend artifacts
        uses: actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427 # v4.1.4
        with:
          name: frontend-build
          path: apps/frontend/dist

      - name: Download backend artifacts
        uses: actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427 # v4.1.4
        with:
          name: backend-build
          path: apps/core-api/dist

      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging..."
          
          # Add your deployment commands here
          # Examples:
          
          # Vercel (with OIDC):
          # npx vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }}
          
          # Netlify (with OIDC):
          # npx netlify deploy --prod --auth=${{ secrets.NETLIFY_TOKEN }}
          
          # AWS S3 (with OIDC - no long-lived credentials):
          # aws s3 sync apps/frontend/dist s3://your-bucket --delete
          
          # Docker + Kubernetes:
          # docker build -t your-image:${{ needs.create-release.outputs.version }} .
          # docker push your-image:${{ needs.create-release.outputs.version }}
          # kubectl set image deployment/your-app app=your-image:${{ needs.create-release.outputs.version }}
          
          echo "✅ Deployment complete"

      - name: Run comprehensive smoke tests
        run: |
          echo "🧪 Running comprehensive smoke tests on staging..."
          
          # Wait for deployment to stabilize
          echo "Waiting for deployment to stabilize..."
          sleep 15
          
          # Health check with retry logic
          echo "Testing health endpoint..."
          for i in {1..5}; do
            if curl -f -s -o /dev/null -w "%{http_code}" https://staging.example.com/health | grep -q "200"; then
              echo "✅ Health check passed"
              break
            else
              if [ $i -eq 5 ]; then
                echo "❌ Health check failed after 5 attempts"
                exit 1
              fi
              echo "Retry $i/5..."
              sleep 5
            fi
          done
          
          # API endpoint check
          echo "Testing API endpoints..."
          # curl -f https://staging.example.com/api/health || exit 1
          
          # Frontend check
          echo "Testing frontend..."
          # RESPONSE=$(curl -s https://staging.example.com/)
          # if ! echo "$RESPONSE" | grep -q "Traffic CRM"; then
          #   echo "❌ Frontend validation failed"
          #   exit 1
          # fi
          
          # Critical user flows (optional - run E2E tests)
          # echo "Running E2E tests..."
          # pnpm --filter ./apps/frontend run test:e2e --config staging
          
          echo "✅ All smoke tests passed"

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [create-release, build-and-test, deploy-staging]
    
    # Needs write access to create issues
    permissions:
      contents: read
      issues: write
    
    if: always()
    
    steps:
      - name: Check job status
        id: check
        run: |
          if [ "${{ needs.create-release.result }}" == "success" ] && \
             [ "${{ needs.build-and-test.result }}" == "success" ] && \
             [ "${{ needs.deploy-staging.result }}" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=✅" >> $GITHUB_OUTPUT
            echo "message=Release deployed successfully to staging!" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "emoji=❌" >> $GITHUB_OUTPUT
            echo "message=Release deployment failed. Check logs for details." >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        if: always()
        # Only run if webhook is configured
        continue-on-error: true
        uses: slackapi/slack-github-action@70cd7be8e40a46e8b0eced40b0de447bdb42f68e # v1.26.0
        with:
          payload: |
            {
              "text": "${{ steps.check.outputs.emoji }} Release ${{ needs.create-release.outputs.tag }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ steps.check.outputs.emoji }} Release ${{ needs.create-release.outputs.tag }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.check.outputs.message }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Status:*\n${{ steps.check.outputs.status }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Environment:*\nStaging"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Jobs:*\nRelease: ${{ needs.create-release.result }}\nBuild: ${{ needs.build-and-test.result }}\nDeploy: ${{ needs.deploy-staging.result }}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Release"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Create failure issue
        if: steps.check.outputs.status == 'failure'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Release ${{ needs.create-release.outputs.tag }} failed`,
              body: `## Release Failure Report
              
              **Version**: ${{ needs.create-release.outputs.tag }}
              **Workflow Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
              **Triggered by**: @${{ github.actor }}
              
              ### Job Results
              - **Create Release**: ${{ needs.create-release.result }}
              - **Build and Test**: ${{ needs.build-and-test.result }}
              - **Deploy to Staging**: ${{ needs.deploy-staging.result }}
              
              ### Next Steps
              1. Review the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              2. Identify and fix the root cause
              3. Consider rolling back if needed
              4. Re-tag or create a new release once fixed
              
              ### Rollback Instructions
              If needed, trigger the [rollback workflow](${{ github.server_url }}/${{ github.repository }}/actions/workflows/rollback-release.yml)
              
              cc: @omar120489`,
              labels: ['release', 'bug', 'high-priority', 'incident']
            });

