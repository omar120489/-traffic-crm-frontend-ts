{"version":3,"file":"currency-z7iYPdZs.js","sources":["../../src/utils/currency.ts"],"sourcesContent":["export interface Money { amountCents: number; currency: string; }\n\nexport const centsToDisplay = (c:number|null|undefined)=>((c??0)/100).toFixed(2);\nexport const centsToAmount  = (c:number|null|undefined)=> (c??0)/100;\n\nexport function amountToCents(a:string|number){\n  const n = typeof a==='string' ? parseFloat(a.replace(/,/g,'')) : a;\n  return isNaN(n) ? 0 : Math.round(n*100);\n}\n\nexport function formatMoney(\n  amountCents:number|null|undefined,\n  currency='USD',\n  locale='en-US'\n){\n  return new Intl.NumberFormat(locale,{style:'currency',currency}).format((amountCents??0)/100);\n}\n\nexport function formatMoneyPlain(amountCents:number|null|undefined,locale='en-US'){\n  return new Intl.NumberFormat(locale,{minimumFractionDigits:2,maximumFractionDigits:2})\n    .format((amountCents??0)/100);\n}\n\nexport function validateMoneyInput(input:string){\n  const cleaned = input.replace(/[^0-9.]/g,'');\n  const num = parseFloat(cleaned);\n  if (isNaN(num) || num < 0) return null;\n  return Math.round(num*100);\n}\n\nexport const createMoney=(amountCents:number,currency='USD'):Money=>({amountCents,currency});\n\n"],"names":["formatMoney","amountCents","currency","locale"],"mappings":"AAUO,SAASA,EACdC,EACAC,EAAS,MACTC,EAAO,QACR,CACC,OAAO,IAAI,KAAK,aAAaA,EAAO,CAAC,MAAM,WAAW,SAAAD,CAAA,CAAS,EAAE,QAAQD,GAAa,GAAG,GAAG,CAC9F"}