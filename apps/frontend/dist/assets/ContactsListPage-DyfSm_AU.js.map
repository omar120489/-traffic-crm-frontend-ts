{"version":3,"file":"ContactsListPage-DyfSm_AU.js","sources":["../../src/services/contacts.sdk.ts","../../src/hooks/useContacts.ts","../../src/views/pages/contacts/ContactsListPage.tsx"],"sourcesContent":["/**\n * Contacts Service using typed SDK\n * \n * This is a new SDK-based service that will eventually replace\n * the legacy services/contacts.ts implementation.\n * \n * To migrate:\n * 1. Test this service alongside the old one\n * 2. Update imports in components to use this file\n * 3. Remove old service once verified\n */\n\nimport { api } from '@/data/clients/sdk';\n\nexport async function fetchContacts() {\n  return api.listContacts();\n}\n\nexport async function fetchContact(id: string) {\n  return api.getContact(id);\n}\n\nexport async function createContact(body: any) {\n  return api.createContact(body);\n}\n\nexport async function updateContact(id: string, body: any) {\n  return api.updateContact(id, body);\n}\n\nexport async function deleteContact(id: string) {\n  return api.deleteContact(id);\n}\n\n// Named export for convenience (aliased to match old service interface)\nexport const contactsSdkApi = {\n  listContacts: fetchContacts,\n  getContact: fetchContact,\n  createContact,\n  updateContact,\n  deleteContact,\n};\n\n","import { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { contactsSdkApi as contactsApi } from '@services/contacts.sdk';\nimport type { Contact, ContactQuery, PaginatedContacts } from '@shared-types';\n\nconst DEFAULT_QUERY: ContactQuery = {\n  page: 1,\n  size: 10,\n  search: '',\n};\n\ninterface UseContactsOptions {\n  initialQuery?: ContactQuery;\n}\n\ninterface UseContactsResult {\n  contacts: Contact[];\n  data: PaginatedContacts | null;\n  loading: boolean;\n  error: unknown;\n  query: ContactQuery;\n  updateQuery: (patch: Partial<ContactQuery>) => void;\n  setQuery: (updater: (prev: ContactQuery) => ContactQuery) => void;\n  refetch: () => Promise<void>;\n}\n\nexport function useContacts(options?: UseContactsOptions): UseContactsResult {\n  const [query, setQueryState] = useState<ContactQuery>(() => ({\n    ...DEFAULT_QUERY,\n    ...(options?.initialQuery ?? {}),\n  }));\n  const [data, setData] = useState<PaginatedContacts | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<unknown>(null);\n\n  const effectiveQuery = useMemo(\n    () => ({\n      ...DEFAULT_QUERY,\n      ...query,\n    }),\n    [query]\n  );\n\n  const execute = useCallback(async (params: ContactQuery) => {\n    const result = await contactsApi.listContacts(params);\n    setData(result);\n    setError(null);\n  }, []);\n\n  const loadContacts = useCallback(\n    async (params: ContactQuery) => {\n      setLoading(true);\n      try {\n        await execute(params);\n      } catch (err) {\n        setError(err);\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [execute]\n  );\n\n  useEffect(() => {\n    let active = true;\n    setLoading(true);\n\n    contactsApi\n      .listContacts(effectiveQuery)\n      .then((result) => {\n        if (!active) return;\n        setData(result);\n        setError(null);\n      })\n      .catch((err) => {\n        if (!active) return;\n        setError(err);\n      })\n      .finally(() => {\n        if (!active) return;\n        setLoading(false);\n      });\n\n    return () => {\n      active = false;\n    };\n  }, [effectiveQuery]);\n\n  const updateQuery = useCallback((patch: Partial<ContactQuery>) => {\n    setQueryState((prev) => ({\n      ...prev,\n      ...patch,\n    }));\n  }, []);\n\n  const setQuery = useCallback((updater: (prev: ContactQuery) => ContactQuery) => {\n    setQueryState((prev) => ({\n      ...prev,\n      ...updater(prev),\n    }));\n  }, []);\n\n  const refetch = useCallback(async () => {\n    await loadContacts(effectiveQuery);\n  }, [loadContacts, effectiveQuery]);\n\n  return {\n    contacts: data?.items ?? [],\n    data,\n    loading,\n    error,\n    query: effectiveQuery,\n    updateQuery,\n    setQuery,\n    refetch,\n  };\n}\n\nexport default useContacts;\n","import { useCallback, useMemo, type ReactNode } from 'react';\nimport { Link as RouterLink, useSearchParams } from 'react-router-dom';\n\nimport Alert from '@mui/material/Alert';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Chip from '@mui/material/Chip';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport SearchIcon from '@mui/icons-material/Search';\nimport PersonAddAltIcon from '@mui/icons-material/PersonAddAlt1';\nimport {\n  DataGrid,\n  type GridColDef,\n  type GridPaginationModel,\n  type GridRenderCellParams,\n} from '@mui/x-data-grid';\n\nimport MainCard from '@/ui-component/cards/MainCard';\nimport { useContacts } from '@hooks/useContacts';\nimport type { Contact, ContactQuery } from '@shared-types';\n\nconst DEFAULT_PAGE_SIZE = 10;\n\nfunction formatDate(value?: string | null) {\n  if (!value) {\n    return '—';\n  }\n\n  return new Intl.DateTimeFormat(undefined, {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n  }).format(new Date(value));\n}\n\nfunction formatPhone(value?: string | null) {\n  if (!value) {\n    return '—';\n  }\n\n  return value;\n}\n\nexport default function ContactsListPage() {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const initialQuery = useMemo<ContactQuery>(() => {\n    const getNumber = (key: string, fallback: number) => {\n      const value = Number(searchParams.get(key));\n      return Number.isFinite(value) && value > 0 ? value : fallback;\n    };\n\n    const getString = (key: string) => {\n      const value = searchParams.get(key);\n      return value && value.trim().length > 0 ? value : undefined;\n    };\n\n    return {\n      page: getNumber('page', 1),\n      size: getNumber('size', DEFAULT_PAGE_SIZE),\n      search: searchParams.get('search') ?? '',\n      dateFrom: getString('dateFrom'),\n      dateTo: getString('dateTo'),\n      ownerId: getString('ownerId'),\n    };\n  }, [searchParams]);\n\n  const { contacts, data, loading, error, query, updateQuery, refetch } = useContacts({\n    initialQuery,\n  });\n\n  const syncSearchParams = useCallback(\n    (patch: Record<string, string | undefined>) => {\n      const next = new URLSearchParams(searchParams);\n      Object.entries(patch).forEach(([key, value]) => {\n        if (value === undefined || value === '') {\n          next.delete(key);\n        } else {\n          next.set(key, value);\n        }\n      });\n      setSearchParams(next);\n    },\n    [searchParams, setSearchParams]\n  );\n\n  const stageFilter = useMemo(() => {\n    const value = searchParams.get('stage');\n    return value && value.trim().length > 0 ? value : undefined;\n  }, [searchParams]);\n\n  const paginationModel = useMemo(\n    () => ({\n      page: Math.max(0, (query.page ?? 1) - 1),\n      pageSize: query.size ?? DEFAULT_PAGE_SIZE,\n    }),\n    [query.page, query.size]\n  );\n\n  const handlePaginationChange = useCallback(\n    (model: GridPaginationModel) => {\n      const nextPage = model.page + 1;\n      const nextSize = model.pageSize;\n      updateQuery({ page: nextPage, size: nextSize });\n      syncSearchParams({\n        page: String(nextPage),\n        size: String(nextSize),\n      });\n    },\n    [syncSearchParams, updateQuery]\n  );\n\n  const handleSearchChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const value = event.target.value;\n      updateQuery({ search: value, page: 1 });\n      const trimmed = value.trim();\n      syncSearchParams({\n        search: trimmed.length > 0 ? value : undefined,\n        page: '1',\n        size: String(query.size ?? DEFAULT_PAGE_SIZE),\n      });\n    },\n    [query.size, syncSearchParams, updateQuery]\n  );\n\n  const handleRefresh = useCallback(() => {\n    void refetch();\n  }, [refetch]);\n\n  const hasFilters = useMemo(() => {\n    const searchFilter = (query.search ?? '').trim();\n    return Boolean(searchFilter || query.dateFrom || query.dateTo || query.ownerId || stageFilter);\n  }, [query.dateFrom, query.dateTo, query.ownerId, query.search, stageFilter]);\n\n  const handleClearFilters = useCallback(() => {\n    const nextSize = query.size ?? DEFAULT_PAGE_SIZE;\n    updateQuery({\n      page: 1,\n      size: nextSize,\n      search: '',\n      dateFrom: undefined,\n      dateTo: undefined,\n      ownerId: undefined,\n    });\n    syncSearchParams({\n      page: '1',\n      size: String(nextSize),\n      search: undefined,\n      dateFrom: undefined,\n      dateTo: undefined,\n      ownerId: undefined,\n      stage: undefined,\n    });\n  }, [query.size, syncSearchParams, updateQuery]);\n\n  const columns = useMemo<GridColDef<Contact>[]>(\n    () => [\n      {\n        field: 'name',\n        headerName: 'Contact',\n        flex: 1,\n        minWidth: 220,\n        renderCell: (params: GridRenderCellParams<Contact>) => (\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 0.25 }}>\n            <Typography variant=\"subtitle1\" fontWeight={600} noWrap>\n              {params.row.firstName} {params.row.lastName}\n            </Typography>\n            <Typography variant=\"caption\" color=\"text.secondary\" noWrap>\n              Owner: {params.row.ownerId ?? '—'}\n            </Typography>\n          </Box>\n        ),\n      },\n      {\n        field: 'email',\n        headerName: 'Email',\n        flex: 1,\n        minWidth: 220,\n      },\n      {\n        field: 'phone',\n        headerName: 'Phone',\n        flex: 0.6,\n        minWidth: 140,\n        renderCell: (params: GridRenderCellParams<Contact>) => (\n          <Typography variant=\"body2\" noWrap>\n            {formatPhone(params.row.phone)}\n          </Typography>\n        ),\n      },\n      {\n        field: 'title',\n        headerName: 'Title',\n        flex: 0.8,\n        minWidth: 160,\n        renderCell: (params: GridRenderCellParams<Contact>) => (\n          <Typography variant=\"body2\" noWrap>\n            {params.row.title ?? '—'}\n          </Typography>\n        ),\n      },\n      {\n        field: 'companyId',\n        headerName: 'Company',\n        flex: 0.8,\n        minWidth: 160,\n        renderCell: (params: GridRenderCellParams<Contact>) =>\n          params.row.companyId ? (\n            <Chip label={params.row.companyId} size=\"small\" variant=\"outlined\" />\n          ) : (\n            <Chip label=\"—\" size=\"small\" variant=\"outlined\" />\n          ),\n      },\n      {\n        field: 'updatedAt',\n        headerName: 'Updated',\n        flex: 0.7,\n        minWidth: 150,\n        renderCell: (params: GridRenderCellParams<Contact>) => (\n          <Typography variant=\"body2\" noWrap>\n            {formatDate(params.row.updatedAt)}\n          </Typography>\n        ),\n      },\n      {\n        field: 'actions',\n        headerName: 'Actions',\n        sortable: false,\n        filterable: false,\n        minWidth: 160,\n        align: 'right',\n        disableColumnMenu: true,\n        renderCell: (params: GridRenderCellParams<Contact>) => {\n          const viewLink: ReactNode = (\n            <Button component={RouterLink} to={`/contacts/${params.row.id}`} size=\"small\">\n              View\n            </Button>\n          );\n\n          const editLink: ReactNode = (\n            <Button\n              component={RouterLink}\n              to={`/contacts/${params.row.id}/edit`}\n              size=\"small\"\n              color=\"secondary\"\n            >\n              Edit\n            </Button>\n          );\n\n          return (\n            <Box sx={{ display: 'flex', flexDirection: 'row', gap: 1 }}>\n              {viewLink}\n              {editLink}\n            </Box>\n          );\n        },\n      },\n    ],\n    []\n  );\n\n  const newContactLink: ReactNode = (\n    <Button\n      component={RouterLink}\n      to=\"/contacts/new\"\n      variant=\"contained\"\n      startIcon={<PersonAddAltIcon />}\n    >\n      New Contact\n    </Button>\n  );\n\n  return (\n    <MainCard title=\"Contacts\" content={false}>\n      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, p: 3 }}>\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: { xs: 'column', md: 'row' },\n            gap: 2,\n            alignItems: { xs: 'stretch', md: 'center' },\n            justifyContent: 'space-between',\n          }}\n        >\n          <TextField\n            fullWidth\n            placeholder=\"Search contacts\"\n            value={query.search ?? ''}\n            onChange={handleSearchChange}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <SearchIcon fontSize=\"small\" />\n                </InputAdornment>\n              ),\n            }}\n          />\n          <Box\n            sx={{\n              display: 'flex',\n              flexDirection: 'row',\n              gap: 1.5,\n              justifyContent: { xs: 'flex-start', md: 'flex-end' },\n            }}\n          >\n            <Button\n              variant=\"outlined\"\n              startIcon={<RefreshIcon />}\n              onClick={handleRefresh}\n              disabled={loading}\n            >\n              Refresh\n            </Button>\n            {newContactLink}\n          </Box>\n        </Box>\n\n        {hasFilters && (\n          <Chip\n            label=\"Active filters\"\n            onDelete={handleClearFilters}\n            color=\"primary\"\n            size=\"small\"\n            sx={{ alignSelf: 'flex-start' }}\n          />\n        )}\n\n        {Boolean(error) && (\n          <Alert severity=\"error\">\n            {error instanceof Error ? error.message : 'Failed to load contacts. Please try again.'}\n          </Alert>\n        )}\n\n        <Box sx={{ width: '100%' }}>\n          <DataGrid\n            autoHeight\n            disableColumnMenu\n            disableRowSelectionOnClick\n            rows={contacts}\n            columns={columns}\n            loading={loading}\n            getRowId={(row: Contact) => row.id}\n            paginationMode=\"server\"\n            paginationModel={paginationModel}\n            onPaginationModelChange={handlePaginationChange}\n            rowCount={data?.total ?? contacts.length}\n            pageSizeOptions={[5, 10, 25, 50]}\n            sx={{\n              '& .MuiDataGrid-cell': {\n                outline: 'none !important',\n              },\n            }}\n          />\n        </Box>\n\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: { xs: 'column', sm: 'row' },\n            gap: 1,\n            alignItems: { xs: 'flex-start', sm: 'center' },\n          }}\n        >\n          <Typography variant=\"caption\" color=\"text.secondary\">\n            Showing {contacts.length} of {data?.total ?? 0} contacts\n          </Typography>\n        </Box>\n      </Box>\n    </MainCard>\n  );\n}\n"],"names":["fetchContacts","api","fetchContact","id","createContact","body","updateContact","deleteContact","contactsSdkApi","useCallback","useEffect","useMemo","useState","importShared","DEFAULT_QUERY","useContacts","options","query","setQueryState","data","setData","loading","setLoading","error","setError","effectiveQuery","execute","params","result","contactsApi","loadContacts","err","active","updateQuery","patch","prev","setQuery","updater","refetch","RouterLink","useSearchParams","DEFAULT_PAGE_SIZE","formatDate","value","formatPhone","ContactsListPage","searchParams","setSearchParams","initialQuery","getNumber","key","fallback","getString","contacts","syncSearchParams","next","stageFilter","paginationModel","handlePaginationChange","model","nextPage","nextSize","handleSearchChange","event","trimmed","handleRefresh","hasFilters","handleClearFilters","columns","jsxs","Box","Typography","jsx","Chip","viewLink","Button","editLink","newContactLink","PersonAddAltIcon","MainCard","TextField","InputAdornment","SearchIcon","RefreshIcon","Alert","DataGrid","row"],"mappings":"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"}