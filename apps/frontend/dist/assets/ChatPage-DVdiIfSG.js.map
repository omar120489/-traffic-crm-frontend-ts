{"version":3,"file":"ChatPage-DVdiIfSG.js","sources":["../../src/features/chat/api.ts","../../src/features/chat/hooks/useChatSocket.ts","../../src/features/chat/hooks/useRooms.ts","../../src/features/chat/components/RoomsList.tsx","../../src/features/chat/hooks/useRoomMessages.ts","../../src/features/chat/components/MessageItem.tsx","../../src/features/chat/components/MessageComposer.tsx","../../src/features/chat/components/RoomView.tsx","../../src/views/apps/chat/ChatPage.tsx"],"sourcesContent":["import axios from 'axios';\nimport type { Room, Message, ID } from './types';\n\nconst api = axios.create({\n  baseURL: import.meta.env.VITE_APP_API_URL ?? '/',\n  withCredentials: true,\n});\n\nexport interface ListResult<T> {\n  items: T[];\n  total?: number;\n  hasMore?: boolean;\n}\n\nexport async function listRooms(params: {\n  search?: string;\n  type?: 'dm' | 'group';\n  onlyUnread?: boolean;\n}) {\n  const { data } = await api.get<ListResult<Room>>('/chat/rooms', { params });\n  return data;\n}\n\nexport async function getRoom(roomId: ID) {\n  const { data } = await api.get<Room>(`/chat/rooms/${roomId}`);\n  return data;\n}\n\nexport async function listMessages(\n  roomId: ID,\n  params: { before?: string; pageSize?: number } = {}\n) {\n  const { data } = await api.get<ListResult<Message>>(`/chat/rooms/${roomId}/messages`, { params });\n  return data;\n}\n\nexport async function sendMessage(roomId: ID, payload: { text?: string; attachmentIds?: ID[] }) {\n  const { data } = await api.post<Message>(`/chat/rooms/${roomId}/messages`, payload);\n  return data;\n}\n\nexport async function markRead(roomId: ID, lastReadMessageId: ID) {\n  await api.post(`/chat/rooms/${roomId}/read`, { lastReadMessageId });\n}\n\nexport async function presignAttachment(input: { name: string; size: number; mime: string }) {\n  const { data } = await api.post<{ uploadUrl: string; fileUrl: string }>(\n    `/chat/attachments/presign`,\n    input\n  );\n  return data;\n}\n","import { useEffect, useMemo, useRef } from 'react';\nimport { io, type Socket } from 'socket.io-client';\n\nexport function useChatSocket(enabled = true) {\n  const token = localStorage.getItem('serviceToken') || sessionStorage.getItem('serviceToken');\n  const socketRef = useRef<Socket | null>(null);\n\n  const socket = useMemo(() => {\n    if (!enabled) return null;\n    const s = io((import.meta as any).env.VITE_APP_API_URL ?? '/', {\n      path: '/socket.io',\n      transports: ['websocket'],\n      auth: { token },\n      reconnection: true,\n      reconnectionAttempts: Infinity,\n      reconnectionDelay: 500,\n      reconnectionDelayMax: 5000,\n    });\n    socketRef.current = s;\n    return s;\n  }, [enabled, token]);\n\n  useEffect(() => {\n    return () => {\n      socketRef.current?.close();\n      socketRef.current = null;\n    };\n  }, []);\n\n  return socket;\n}\n","import { useEffect, useState } from 'react';\nimport { listRooms } from '../api';\nimport type { Room } from '../types';\nimport { useSearchParams } from 'react-router-dom';\nimport { useChatSocket } from './useChatSocket';\n\nexport function useRooms() {\n  const [params, setParams] = useSearchParams();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [rooms, setRooms] = useState<Room[]>([]);\n\n  const search = params.get('search') || '';\n  const type = (params.get('type') as 'dm' | 'group' | null) || null;\n  const onlyUnread = params.get('onlyUnread') === 'true';\n\n  const socket = useChatSocket(true);\n\n  async function refresh() {\n    try {\n      setLoading(true);\n      const data = await listRooms({ search, type: type ?? undefined, onlyUnread });\n      setRooms(data.items);\n      setError(null);\n    } catch (e: any) {\n      setError(e?.message ?? 'Failed to load rooms');\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    refresh();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [search, type, onlyUnread]);\n\n  useEffect(() => {\n    if (!socket) return;\n    const onMessage = (_payload: any) => {\n      refresh();\n    };\n    socket.on('chat.message', onMessage);\n    return () => {\n      socket.off('chat.message', onMessage);\n    };\n  }, [socket]);\n\n  const setFilter = (key: 'search' | 'type' | 'onlyUnread', value: string | boolean) => {\n    const p = new URLSearchParams(params);\n    if (key === 'onlyUnread') p.set(key, String(value));\n    else if (value) p.set(key, String(value));\n    else p.delete(key);\n    setParams(p, { replace: true });\n  };\n\n  return {\n    rooms,\n    loading,\n    error,\n    refresh,\n    filters: { search, type, onlyUnread },\n    setFilter,\n  };\n}\n","import * as React from 'react';\nimport {\n  Avatar,\n  Badge,\n  Box,\n  Divider,\n  IconButton,\n  InputAdornment,\n  List,\n  ListItemButton,\n  ListItemText,\n  Stack,\n  TextField,\n  Tooltip,\n  Typography,\n} from '@mui/material';\nimport { useRooms } from '../hooks/useRooms';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\n\nexport default function RoomsList() {\n  const { rooms, filters, setFilter, loading } = useRooms();\n  const [params] = useSearchParams();\n  const nav = useNavigate();\n  const currentRoom = params.get('room');\n\n  return (\n    <Box\n      sx={{\n        width: 360,\n        borderRight: 1,\n        borderColor: 'divider',\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <Box sx={{ p: 1.5 }}>\n        <TextField\n          fullWidth\n          size=\"small\"\n          placeholder=\"Search conversations…\"\n          value={filters.search}\n          onChange={(e) => setFilter('search', e.target.value)}\n          InputProps={{ startAdornment: <InputAdornment position=\"start\">🔎</InputAdornment> }}\n        />\n        <Stack direction=\"row\" spacing={1} sx={{ mt: 1 }}>\n          <Tooltip title=\"Only unread\">\n            <IconButton\n              onClick={() => setFilter('onlyUnread', !filters.onlyUnread)}\n              color={filters.onlyUnread ? 'primary' : 'default'}\n              size=\"small\"\n            >\n              🟣\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"DMs\">\n            <IconButton\n              onClick={() => setFilter('type', filters.type === 'dm' ? '' : 'dm')}\n              color={filters.type === 'dm' ? 'primary' : 'default'}\n              size=\"small\"\n            >\n              👤\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Groups\">\n            <IconButton\n              onClick={() => setFilter('type', filters.type === 'group' ? '' : 'group')}\n              color={filters.type === 'group' ? 'primary' : 'default'}\n              size=\"small\"\n            >\n              👥\n            </IconButton>\n          </Tooltip>\n        </Stack>\n      </Box>\n      <Divider />\n      <Box sx={{ flex: 1, overflowY: 'auto' }}>\n        <List disablePadding>\n          {rooms.map((r) => {\n            const primary = r.name || r.participants.map((p) => p.name).join(', ');\n            const selected = currentRoom === r.id;\n            return (\n              <ListItemButton\n                key={r.id}\n                selected={selected}\n                onClick={() => nav(`/chat?room=${encodeURIComponent(r.id)}`, { replace: false })}\n              >\n                <Badge\n                  color=\"primary\"\n                  badgeContent={r.unreadCount || 0}\n                  overlap=\"circular\"\n                  anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n                >\n                  <Avatar sx={{ mr: 1 }}>{primary.slice(0, 1)}</Avatar>\n                </Badge>\n                <ListItemText\n                  primary={\n                    <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n                      <Typography variant=\"body1\" noWrap>\n                        {primary}\n                      </Typography>\n                      {r.lastMessageAt && (\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          {new Date(r.lastMessageAt).toLocaleTimeString()}\n                        </Typography>\n                      )}\n                    </Stack>\n                  }\n                  secondary={r.entityRef ? `${r.entityRef.type} • ${r.entityRef.id}` : undefined}\n                  primaryTypographyProps={{ noWrap: true }}\n                />\n              </ListItemButton>\n            );\n          })}\n          {!rooms.length && !loading && (\n            <Box sx={{ p: 2, textAlign: 'center', color: 'text.secondary' }}>No conversations</Box>\n          )}\n        </List>\n      </Box>\n    </Box>\n  );\n}\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport type { ID, Message } from '../types';\nimport { listMessages, sendMessage } from '../api';\nimport { useChatSocket } from './useChatSocket';\n\nexport function useRoomMessages(roomId: ID | null) {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [hasMore, setHasMore] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const cursorRef = useRef<string | null>(null);\n  const socket = useChatSocket(!!roomId);\n\n  const merge = useCallback((incoming: Message[], toTop = false) => {\n    setMessages((prev) => {\n      const map = new Map<string, Message>();\n      for (const m of toTop ? incoming : prev) map.set(m.id, m);\n      for (const m of toTop ? prev : incoming) map.set(m.id, m);\n      return Array.from(map.values()).sort((a, b) => a.createdAt.localeCompare(b.createdAt));\n    });\n  }, []);\n\n  const loadInitial = useCallback(async () => {\n    if (!roomId) return;\n    setLoading(true);\n    try {\n      const res = await listMessages(roomId, { pageSize: 50 });\n      cursorRef.current = res.items.length ? res.items[0].id : null;\n      setHasMore(!!res.hasMore);\n      setMessages(res.items.sort((a, b) => a.createdAt.localeCompare(b.createdAt)));\n      setError(null);\n    } catch (e: any) {\n      setError(e?.message ?? 'Failed to load messages');\n    } finally {\n      setLoading(false);\n    }\n  }, [roomId]);\n\n  const loadMore = useCallback(async () => {\n    if (!roomId || !cursorRef.current || loading) return;\n    try {\n      setLoading(true);\n      const res = await listMessages(roomId, { before: cursorRef.current, pageSize: 50 });\n      if (res.items.length) cursorRef.current = res.items[0].id;\n      setHasMore(!!res.hasMore);\n      merge(res.items, true);\n    } catch (e: any) {\n      setError(e?.message ?? 'Failed to load more messages');\n    } finally {\n      setLoading(false);\n    }\n  }, [roomId, merge, loading]);\n\n  useEffect(() => {\n    loadInitial();\n  }, [loadInitial]);\n\n  useEffect(() => {\n    if (!socket || !roomId) return;\n    const handler = (payload: any) => {\n      if (payload?.roomId !== roomId) return;\n      merge([payload as Message]);\n    };\n    socket.on('chat.message', handler);\n    return () => {\n      socket.off('chat.message', handler);\n    };\n  }, [socket, roomId, merge]);\n\n  const send = useCallback(\n    async (draft: { text?: string; attachmentIds?: ID[] }) => {\n      if (!roomId) return;\n      const temp: Message = {\n        id: 'temp_' + Math.random().toString(36).slice(2),\n        roomId,\n        sender: { id: 'me', name: 'Me' },\n        text: draft.text,\n        attachments: [],\n        createdAt: new Date().toISOString(),\n        status: 'sending',\n      };\n      merge([temp]);\n      try {\n        const real = await sendMessage(roomId, draft);\n        merge([real]);\n      } catch (e) {\n        // TODO: show toast\n      }\n    },\n    [roomId, merge]\n  );\n\n  return { messages, hasMore, loading, error, loadMore, send, reload: loadInitial };\n}\n","import * as React from 'react';\nimport { Avatar, Box, Card, CardContent, Typography } from '@mui/material';\nimport type { Message } from '../types';\n\nexport default function MessageItem({ m, isMine }: { m: Message; isMine: boolean }) {\n  return (\n    <Box sx={{ display: 'flex', justifyContent: isMine ? 'flex-end' : 'flex-start', my: 0.5 }}>\n      {!isMine && (\n        <Avatar sx={{ width: 28, height: 28, mr: 1 }}>{m.sender.name.slice(0, 1)}</Avatar>\n      )}\n      <Card\n        elevation={0}\n        sx={{\n          maxWidth: '75%',\n          bgcolor: isMine ? 'primary.main' : 'background.paper',\n          color: isMine ? 'primary.contrastText' : 'text.primary',\n        }}\n      >\n        <CardContent sx={{ py: 1, px: 1.5 }}>\n          {m.text && (\n            <Typography variant=\"body2\" sx={{ whiteSpace: 'pre-wrap', wordBreak: 'break-word' }}>\n              {m.text}\n            </Typography>\n          )}\n          {!!m.attachments?.length && (\n            <Box sx={{ mt: 0.5 }}>\n              {m.attachments.map((a) => (\n                <Typography key={a.id} variant=\"caption\" sx={{ display: 'block' }}>\n                  📎{' '}\n                  <a href={a.url} target=\"_blank\" rel=\"noreferrer\">\n                    {a.name}\n                  </a>\n                </Typography>\n              ))}\n            </Box>\n          )}\n          {m.status === 'sending' && (\n            <Typography variant=\"caption\" sx={{ opacity: 0.6 }}>\n              sending…\n            </Typography>\n          )}\n        </CardContent>\n      </Card>\n    </Box>\n  );\n}\n","import * as React from 'react';\nimport { Box, IconButton, TextField, Tooltip } from '@mui/material';\n\nexport default function MessageComposer({\n  onSend,\n}: {\n  onSend: (draft: { text?: string }) => void;\n}) {\n  const [value, setValue] = React.useState('');\n\n  const submit = () => {\n    const text = value.trim();\n    if (!text) return;\n    onSend({ text });\n    setValue('');\n  };\n\n  return (\n    <Box\n      sx={{\n        borderTop: 1,\n        borderColor: 'divider',\n        p: 1,\n        display: 'flex',\n        alignItems: 'center',\n        gap: 1,\n      }}\n    >\n      <TextField\n        fullWidth\n        placeholder=\"Type a message…\"\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n        onKeyDown={(e) => {\n          if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) submit();\n        }}\n      />\n      <Tooltip title=\"Send (Ctrl/⌘+Enter)\">\n        <IconButton color=\"primary\" onClick={submit}>\n          ➡️\n        </IconButton>\n      </Tooltip>\n    </Box>\n  );\n}\n","import * as React from 'react';\nimport { Box, CircularProgress, Divider, Stack, Typography } from '@mui/material';\nimport { useSearchParams } from 'react-router-dom';\nimport { useRoomMessages } from '../hooks/useRoomMessages';\nimport MessageItem from './MessageItem';\nimport MessageComposer from './MessageComposer';\n\nexport default function RoomView() {\n  const [params] = useSearchParams();\n  const roomId = params.get('room');\n  const { messages, hasMore, loading, error, loadMore, send } = useRoomMessages(roomId);\n\n  if (!roomId) {\n    return (\n      <Box sx={{ flex: 1, display: 'grid', placeItems: 'center', color: 'text.secondary' }}>\n        Select a conversation\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ flex: 1, display: 'flex', flexDirection: 'column', minWidth: 0 }}>\n      <Box sx={{ px: 2, py: 1 }}>\n        <Typography variant=\"h6\">Room: {roomId}</Typography>\n      </Box>\n      <Divider />\n      <Box sx={{ flex: 1, overflowY: 'auto', p: 2, display: 'flex', flexDirection: 'column' }}>\n        {hasMore && (\n          <Box sx={{ textAlign: 'center', mb: 1 }}>\n            <Typography variant=\"caption\" sx={{ cursor: 'pointer' }} onClick={loadMore}>\n              {loading ? 'Loading…' : 'Load earlier messages'}\n            </Typography>\n          </Box>\n        )}\n        {messages.map((m) => (\n          <MessageItem key={m.id} m={m} isMine={m.sender.id === 'me'} />\n        ))}\n        {loading && (\n          <Box sx={{ display: 'flex', justifyContent: 'center', mt: 1 }}>\n            <CircularProgress size={20} />\n          </Box>\n        )}\n        {error && (\n          <Typography color=\"error\" variant=\"caption\">\n            {error}\n          </Typography>\n        )}\n      </Box>\n      <Divider />\n      <Box>\n        <Stack direction=\"row\" sx={{ width: '100%' }}>\n          <MessageComposer onSend={send} />\n        </Stack>\n      </Box>\n    </Box>\n  );\n}\n","import * as React from 'react';\nimport { Box, Button, Stack, TextField, InputAdornment } from '@mui/material';\nimport AppPage from '../../../layouts/AppPage';\nimport RoomsList from '../../../features/chat/components/RoomsList';\nimport RoomView from '../../../features/chat/components/RoomView';\nimport { useSearchParams } from 'react-router-dom';\n\nexport default function ChatPage() {\n  const [params, setParams] = useSearchParams();\n  const actions = (\n    <Stack direction=\"row\" spacing={1}>\n      <Button variant=\"outlined\" size=\"small\">\n        New DM\n      </Button>\n      <Button variant=\"contained\" size=\"small\">\n        New Group\n      </Button>\n    </Stack>\n  );\n\n  const toolbar = (\n    <Stack direction=\"row\" spacing={1}>\n      <TextField\n        size=\"small\"\n        placeholder=\"Search…\"\n        value={params.get('search') || ''}\n        onChange={(e) => {\n          const p = new URLSearchParams(params);\n          const v = e.target.value;\n          if (v) p.set('search', v);\n          else p.delete('search');\n          setParams(p, { replace: true });\n        }}\n        InputProps={{ startAdornment: <InputAdornment position=\"start\">🔎</InputAdornment> }}\n      />\n    </Stack>\n  );\n\n  return (\n    <AppPage title=\"Chat\" subtitle=\"Direct & group messaging\" actions={actions} toolbar={toolbar}>\n      <Box sx={{ display: 'flex', minHeight: 560, overflow: 'hidden' }}>\n        <RoomsList />\n        <RoomView />\n      </Box>\n    </AppPage>\n  );\n}\n"],"names":["api","axios","listRooms","params","data","listMessages","roomId","sendMessage","payload","useEffect","useMemo","useRef","importShared","useChatSocket","enabled","token","socketRef","socket","s","io","useState","useSearchParams","useRooms","setParams","loading","setLoading","error","setError","rooms","setRooms","search","type","onlyUnread","refresh","e","onMessage","_payload","key","value","p","Avatar","Badge","Box","Divider","IconButton","InputAdornment","List","ListItemButton","ListItemText","Stack","TextField","Tooltip","Typography","useNavigate","RoomsList","filters","setFilter","nav","currentRoom","jsxs","jsx","r","primary","selected","useCallback","useRoomMessages","messages","setMessages","hasMore","setHasMore","cursorRef","merge","incoming","toTop","prev","map","m","a","b","loadInitial","res","loadMore","handler","send","draft","temp","real","Card","CardContent","MessageItem","isMine","React","MessageComposer","onSend","setValue","submit","text","CircularProgress","RoomView","Button","ChatPage","actions","toolbar","v","AppPage"],"mappings":"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"}