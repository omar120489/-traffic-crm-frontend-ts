{"version":3,"file":"axios-C7gIbs9M.js","sources":["../../src/data/clients/axios.ts"],"sourcesContent":["import axios, {\n  type AxiosInstance,\n  type InternalAxiosRequestConfig,\n  type AxiosRequestConfig,\n  type AxiosResponse,\n} from 'axios';\nimport type { LoginResponse, UserProfileResponse } from 'types/api';\n\n// ==============================|| AXIOS CONFIGURATION ||============================== //\n\nconst baseURL = import.meta.env.VITE_APP_API_URL || 'http://localhost:8787/';\n\nconst axiosServices: AxiosInstance = axios.create({\n  baseURL,\n  timeout: 15000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// ==============================|| AXIOS - FOR MOCK SERVICES ||============================== //\n\naxiosServices.interceptors.request.use(\n  async (config: InternalAxiosRequestConfig): Promise<InternalAxiosRequestConfig> => {\n    const accessToken = localStorage.getItem('serviceToken');\n    if (accessToken && config.headers) {\n      config.headers['Authorization'] = `Bearer ${accessToken}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\naxiosServices.interceptors.response.use(\n  (response: AxiosResponse) => response,\n  (error) => {\n    if (error.response?.status === 401 && !window.location.href.includes('/login')) {\n      localStorage.removeItem('serviceToken');\n      delete axiosServices.defaults.headers.common.Authorization;\n      window.location.pathname = '/login';\n    }\n    return Promise.reject((error.response && error.response.data) || 'Wrong Services');\n  }\n);\n\nexport default axiosServices;\n\n// ==============================|| TYPED FETCHER ||============================== //\n\nexport async function fetcher<T = any>(\n  args: string | [string, InternalAxiosRequestConfig?]\n): Promise<T> {\n  const [url, config] = Array.isArray(args) ? args : [args];\n\n  const res = await axiosServices.get<T>(url, { ...config });\n\n  return res.data;\n}\n\n// ==============================|| TYPED API METHODS ||============================== //\n\n// Generic GET method with typing\nexport async function apiGet<T = any>(url: string, config?: AxiosRequestConfig): Promise<T> {\n  const response = await axiosServices.get<T>(url, config);\n  return response.data;\n}\n\n// Generic POST method with typing\nexport async function apiPost<TRequest = any, TResponse = any>(\n  url: string,\n  data?: TRequest,\n  config?: AxiosRequestConfig\n): Promise<TResponse> {\n  const response = await axiosServices.post<TResponse>(url, data, config);\n  return response.data;\n}\n\n// Generic PUT method with typing\nexport async function apiPut<TRequest = any, TResponse = any>(\n  url: string,\n  data?: TRequest,\n  config?: AxiosRequestConfig\n): Promise<TResponse> {\n  const response = await axiosServices.put<TResponse>(url, data, config);\n  return response.data;\n}\n\n// Generic PATCH method with typing\nexport async function apiPatch<TRequest = any, TResponse = any>(\n  url: string,\n  data?: TRequest,\n  config?: AxiosRequestConfig\n): Promise<TResponse> {\n  const response = await axiosServices.patch<TResponse>(url, data, config);\n  return response.data;\n}\n\n// Generic DELETE method with typing\nexport async function apiDelete<T = any>(url: string, config?: AxiosRequestConfig): Promise<T> {\n  const response = await axiosServices.delete<T>(url, config);\n  return response.data;\n}\n\n// ==============================|| SPECIALIZED API METHODS ||============================== //\n\n// Auth API methods\nexport const authApi = {\n  login: (email: string, password: string) =>\n    apiPost<{ email: string; password: string }, LoginResponse>('/api/account/login', {\n      email,\n      password,\n    }),\n\n  getProfile: () => apiGet<UserProfileResponse>('/api/account/me'),\n\n  register: (data: { email: string; password: string; firstName: string; lastName: string }) =>\n    apiPost('/api/account/register', data),\n\n  resetPassword: (email: string) => apiPost('/api/account/reset-password', { email }),\n};\n\n// Export the configured instance for backward compatibility\nexport { axiosServices as axios };\nexport type { ApiResponse, PaginatedResponse, LoginResponse, UserProfileResponse } from 'types/api';\n"],"names":["baseURL","axiosServices","axios","config","accessToken","error","response","apiGet","url","apiPost","data","apiPatch","apiDelete","authApi","email","password"],"mappings":"wCAUA,MAAMA,EAAU,iCAEVC,EAA+BC,EAAM,OAAO,CAChD,QAAAF,EACA,QAAS,KACT,QAAS,CACP,eAAgB,kBAAA,CAEpB,CAAC,EAIDC,EAAc,aAAa,QAAQ,IACjC,MAAOE,GAA4E,CACjF,MAAMC,EAAc,aAAa,QAAQ,cAAc,EACvD,OAAIA,GAAeD,EAAO,UACxBA,EAAO,QAAQ,cAAmB,UAAUC,CAAW,IAElDD,CACT,EACCE,GACQ,QAAQ,OAAOA,CAAK,CAE/B,EAEAJ,EAAc,aAAa,SAAS,IACjCK,GAA4BA,EAC5BD,IACKA,EAAM,UAAU,SAAW,KAAO,CAAC,OAAO,SAAS,KAAK,SAAS,QAAQ,IAC3E,aAAa,WAAW,cAAc,EACtC,OAAOJ,EAAc,SAAS,QAAQ,OAAO,cAC7C,OAAO,SAAS,SAAW,UAEtB,QAAQ,OAAQI,EAAM,UAAYA,EAAM,SAAS,MAAS,gBAAgB,EAErF,EAmBA,eAAsBE,EAAgBC,EAAaL,EAAyC,CAE1F,OADiB,MAAMF,EAAc,IAAOO,EAAKL,CAAM,GACvC,IAClB,CAGA,eAAsBM,EACpBD,EACAE,EACAP,EACoB,CAEpB,OADiB,MAAMF,EAAc,KAAgBO,EAAKE,EAAMP,CAAM,GACtD,IAClB,CAaA,eAAsBQ,EACpBH,EACAE,EACAP,EACoB,CAEpB,OADiB,MAAMF,EAAc,MAAiBO,EAAKE,EAAMP,CAAM,GACvD,IAClB,CAGA,eAAsBS,EAAmBJ,EAAaL,EAAyC,CAE7F,OADiB,MAAMF,EAAc,OAAUO,EAAKL,CAAM,GAC1C,IAClB,CAKO,MAAMU,EAAU,CACrB,MAAO,CAACC,EAAeC,IACrBN,EAA4D,qBAAsB,CAChF,MAAAK,EACA,SAAAC,CAAA,CACD,EAEH,WAAY,IAAMR,EAA4B,iBAAiB,EAE/D,SAAWG,GACTD,EAAQ,wBAAyBC,CAAI,EAEvC,cAAgBI,GAAkBL,EAAQ,8BAA+B,CAAE,MAAAK,EAAO,CACpF"}