{"version":3,"file":"useWebSocketEvents-BHTNCTky.js","sources":["../../src/hooks/useWebSocketEvents.ts"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\nimport { io, type Socket } from 'socket.io-client';\n\ntype WebSocketEventHandler = (data: unknown) => void;\n\ninterface UseWebSocketEventsResult {\n  connected: boolean;\n  subscribe: (event: string, handler: WebSocketEventHandler) => () => void;\n  emit: (event: string, data?: unknown) => void;\n  disconnect: () => void;\n}\n\n// Singleton socket instance\nlet socketInstance: Socket | null = null;\nlet connectionCount = 0;\n\n/**\n * Derive WebSocket URL from HTTP API URL\n * http://localhost:8787 → ws://localhost:8787\n * https://api.example.com → wss://api.example.com\n */\nfunction getWebSocketUrl(): string {\n  // Allow override via env\n  const envWsUrl = import.meta.env.VITE_APP_WS_URL;\n  if (envWsUrl) {\n    return envWsUrl;\n  }\n\n  // Derive from HTTP API URL\n  const apiUrl = import.meta.env.VITE_APP_API_URL || 'http://localhost:8787';\n  const url = new URL(apiUrl);\n  const wsProtocol = url.protocol === 'https:' ? 'wss:' : 'ws:';\n  return `${wsProtocol}//${url.host}`;\n}\n\n/**\n * Get or create the singleton socket connection\n */\nfunction getSocket(): Socket {\n  if (!socketInstance) {\n    const wsUrl = getWebSocketUrl();\n    socketInstance = io(wsUrl, {\n      transports: ['websocket', 'polling'],\n      reconnection: true,\n      reconnectionDelay: 1000,\n      reconnectionDelayMax: 5000,\n      reconnectionAttempts: Infinity\n    });\n\n    // Log connection events in development\n    if (import.meta.env.DEV) {\n      socketInstance.on('connect', () => {\n        console.log('[WebSocket] Connected to', wsUrl);\n      });\n\n      socketInstance.on('disconnect', (reason) => {\n        console.log('[WebSocket] Disconnected:', reason);\n      });\n\n      socketInstance.on('connect_error', (error) => {\n        console.error('[WebSocket] Connection error:', error.message);\n      });\n    }\n  }\n  return socketInstance;\n}\n\n/**\n * Hook to manage WebSocket connection and event subscriptions\n *\n * Features:\n * - Singleton connection (shared across all components using this hook)\n * - Auto-connect on mount\n * - Auto-reconnect on disconnect\n * - Subscribe/unsubscribe to events with stable handlers\n * - Clean up on unmount\n *\n * @example\n * ```tsx\n * const { connected, subscribe } = useWebSocketEvents();\n *\n * useEffect(() => {\n *   const unsubscribe = subscribe('comment:new', (data) => {\n *     console.log('New comment:', data);\n *   });\n *   return unsubscribe;\n * }, [subscribe]);\n * ```\n */\nexport function useWebSocketEvents(): UseWebSocketEventsResult {\n  const [connected, setConnected] = useState(false);\n  const socketRef = useRef<Socket | null>(null);\n  const handlersRef = useRef<Map<string, Set<WebSocketEventHandler>>>(new Map());\n\n  // Initialize socket connection\n  useEffect(() => {\n    connectionCount++;\n    const socket = getSocket();\n    socketRef.current = socket;\n\n    // Update connected state\n    const handleConnect = () => setConnected(true);\n    const handleDisconnect = () => setConnected(false);\n\n    socket.on('connect', handleConnect);\n    socket.on('disconnect', handleDisconnect);\n\n    // Set initial state\n    setConnected(socket.connected);\n\n    // Connect if not already connected\n    if (!socket.connected) {\n      socket.connect();\n    }\n\n    return () => {\n      connectionCount--;\n      socket.off('connect', handleConnect);\n      socket.off('disconnect', handleDisconnect);\n\n      // Only disconnect if this is the last component using the socket\n      if (connectionCount === 0 && socketInstance) {\n        socketInstance.disconnect();\n        socketInstance = null;\n      }\n    };\n  }, []);\n\n  /**\n   * Subscribe to a WebSocket event\n   * Returns an unsubscribe function\n   */\n  const subscribe = useCallback((event: string, handler: WebSocketEventHandler) => {\n    const socket = socketRef.current;\n    if (!socket) {\n      console.warn('[WebSocket] Cannot subscribe: socket not initialized');\n      return () => {};\n    }\n\n    // Store handler reference\n    if (!handlersRef.current.has(event)) {\n      handlersRef.current.set(event, new Set());\n    }\n    handlersRef.current.get(event)?.add(handler);\n\n    // Create wrapper to avoid stale closures\n    const wrapper = (data: unknown) => {\n      const handlers = handlersRef.current.get(event);\n      if (handlers?.has(handler)) {\n        handler(data);\n      }\n    };\n\n    socket.on(event, wrapper);\n\n    // Return unsubscribe function\n    return () => {\n      socket.off(event, wrapper);\n      const handlers = handlersRef.current.get(event);\n      handlers?.delete(handler);\n      if (handlers?.size === 0) {\n        handlersRef.current.delete(event);\n      }\n    };\n  }, []);\n\n  /**\n   * Emit an event to the server\n   */\n  const emit = useCallback((event: string, data?: unknown) => {\n    const socket = socketRef.current;\n    if (!socket?.connected) {\n      console.warn('[WebSocket] Cannot emit: socket not connected');\n      return;\n    }\n    socket.emit(event, data);\n  }, []);\n\n  /**\n   * Manually disconnect (usually not needed, handled by useEffect cleanup)\n   */\n  const disconnect = useCallback(() => {\n    const socket = socketRef.current;\n    if (socket) {\n      socket.disconnect();\n    }\n  }, []);\n\n  return {\n    connected,\n    subscribe,\n    emit,\n    disconnect\n  };\n}\n\nexport default useWebSocketEvents;\n"],"names":["useCallback","useEffect","useRef","useState","importShared","socketInstance","connectionCount","getWebSocketUrl","getSocket","wsUrl","io","useWebSocketEvents","connected","setConnected","socketRef","handlersRef","socket","handleConnect","handleDisconnect","subscribe","event","handler","wrapper","data","handlers","emit","disconnect"],"mappings":"4GAAA,KAAA,CAAA,YAAAA,EAAA,UAAAC,EAAA,OAAAC,EAAA,SAAAC,CAAA,EAAA,MAAAC,EAAA,OAAA,EAaA,IAAIC,EAAgC,KAChCC,EAAkB,EAOtB,SAASC,GAA0B,CAI/B,MAFe,0BAUnB,CAKA,SAASC,GAAoB,CAC3B,GAAI,CAACH,EAAgB,CACnB,MAAMI,EAAQF,EAAA,EACdF,EAAiBK,EAAGD,EAAO,CACzB,WAAY,CAAC,YAAa,SAAS,EACnC,aAAc,GACd,kBAAmB,IACnB,qBAAsB,IACtB,qBAAsB,GAAA,CACvB,CAgBH,CACA,OAAOJ,CACT,CAwBO,SAASM,GAA+C,CAC7D,KAAM,CAACC,EAAWC,CAAY,EAAIV,EAAS,EAAK,EAC1CW,EAAYZ,EAAsB,IAAI,EACtCa,EAAcb,EAAgD,IAAI,GAAK,EAG7ED,EAAU,IAAM,CACdK,IACA,MAAMU,EAASR,EAAA,EACfM,EAAU,QAAUE,EAGpB,MAAMC,EAAgB,IAAMJ,EAAa,EAAI,EACvCK,EAAmB,IAAML,EAAa,EAAK,EAEjD,OAAAG,EAAO,GAAG,UAAWC,CAAa,EAClCD,EAAO,GAAG,aAAcE,CAAgB,EAGxCL,EAAaG,EAAO,SAAS,EAGxBA,EAAO,WACVA,EAAO,QAAA,EAGF,IAAM,CACXV,IACAU,EAAO,IAAI,UAAWC,CAAa,EACnCD,EAAO,IAAI,aAAcE,CAAgB,EAGrCZ,IAAoB,GAAKD,IAC3BA,EAAe,WAAA,EACfA,EAAiB,KAErB,CACF,EAAG,CAAA,CAAE,EAML,MAAMc,EAAYnB,EAAY,CAACoB,EAAeC,IAAmC,CAC/E,MAAML,EAASF,EAAU,QACzB,GAAI,CAACE,EACH,eAAQ,KAAK,sDAAsD,EAC5D,IAAM,CAAC,EAIXD,EAAY,QAAQ,IAAIK,CAAK,GAChCL,EAAY,QAAQ,IAAIK,EAAO,IAAI,GAAK,EAE1CL,EAAY,QAAQ,IAAIK,CAAK,GAAG,IAAIC,CAAO,EAG3C,MAAMC,EAAWC,GAAkB,CAChBR,EAAY,QAAQ,IAAIK,CAAK,GAChC,IAAIC,CAAO,GACvBA,EAAQE,CAAI,CAEhB,EAEA,OAAAP,EAAO,GAAGI,EAAOE,CAAO,EAGjB,IAAM,CACXN,EAAO,IAAII,EAAOE,CAAO,EACzB,MAAME,EAAWT,EAAY,QAAQ,IAAIK,CAAK,EAC9CI,GAAU,OAAOH,CAAO,EACpBG,GAAU,OAAS,GACrBT,EAAY,QAAQ,OAAOK,CAAK,CAEpC,CACF,EAAG,CAAA,CAAE,EAKCK,EAAOzB,EAAY,CAACoB,EAAeG,IAAmB,CAC1D,MAAMP,EAASF,EAAU,QACzB,GAAI,CAACE,GAAQ,UAAW,CACtB,QAAQ,KAAK,+CAA+C,EAC5D,MACF,CACAA,EAAO,KAAKI,EAAOG,CAAI,CACzB,EAAG,CAAA,CAAE,EAKCG,EAAa1B,EAAY,IAAM,CACnC,MAAMgB,EAASF,EAAU,QACrBE,GACFA,EAAO,WAAA,CAEX,EAAG,CAAA,CAAE,EAEL,MAAO,CACL,UAAAJ,EACA,UAAAO,EACA,KAAAM,EACA,WAAAC,CAAA,CAEJ"}